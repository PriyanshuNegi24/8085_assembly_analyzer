# Generated from Assembly8085.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,362,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,4,2,53,8,2,
        11,2,12,2,54,1,3,1,3,5,3,59,8,3,10,3,12,3,62,9,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,143,8,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,238,8,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,300,8,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,3,17,328,8,17,1,
        18,4,18,331,8,18,11,18,12,18,332,1,18,1,18,1,19,4,19,338,8,19,11,
        19,12,19,339,1,19,1,19,1,20,4,20,345,8,20,11,20,12,20,346,1,21,1,
        21,5,21,351,8,21,10,21,12,21,354,9,21,1,22,4,22,357,8,22,11,22,12,
        22,358,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,0,
        41,0,43,19,45,20,1,0,18,2,0,10,10,13,13,2,0,65,65,97,97,2,0,66,66,
        98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,72,
        72,104,104,2,0,76,76,108,108,2,0,80,80,112,112,2,0,83,83,115,115,
        2,0,87,87,119,119,2,0,77,77,109,109,3,0,48,57,65,70,97,102,1,0,48,
        49,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,9,9,32,32,443,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,52,1,0,0,0,7,56,1,0,0,
        0,9,142,1,0,0,0,11,237,1,0,0,0,13,299,1,0,0,0,15,301,1,0,0,0,17,
        303,1,0,0,0,19,305,1,0,0,0,21,307,1,0,0,0,23,309,1,0,0,0,25,311,
        1,0,0,0,27,313,1,0,0,0,29,315,1,0,0,0,31,319,1,0,0,0,33,322,1,0,
        0,0,35,327,1,0,0,0,37,330,1,0,0,0,39,337,1,0,0,0,41,344,1,0,0,0,
        43,348,1,0,0,0,45,356,1,0,0,0,47,48,5,58,0,0,48,2,1,0,0,0,49,50,
        5,44,0,0,50,4,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,
        54,52,1,0,0,0,54,55,1,0,0,0,55,6,1,0,0,0,56,60,5,59,0,0,57,59,8,
        0,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,
        8,1,0,0,0,62,60,1,0,0,0,63,64,5,78,0,0,64,65,5,79,0,0,65,143,5,80,
        0,0,66,67,5,72,0,0,67,68,5,76,0,0,68,143,5,84,0,0,69,70,5,82,0,0,
        70,71,5,69,0,0,71,143,5,84,0,0,72,73,5,82,0,0,73,74,5,78,0,0,74,
        143,5,90,0,0,75,76,5,82,0,0,76,143,5,90,0,0,77,78,5,82,0,0,78,79,
        5,78,0,0,79,143,5,67,0,0,80,81,5,82,0,0,81,143,5,67,0,0,82,83,5,
        82,0,0,83,84,5,80,0,0,84,143,5,79,0,0,85,86,5,82,0,0,86,87,5,80,
        0,0,87,143,5,69,0,0,88,89,5,82,0,0,89,143,5,80,0,0,90,91,5,82,0,
        0,91,143,5,77,0,0,92,93,5,88,0,0,93,94,5,84,0,0,94,95,5,72,0,0,95,
        143,5,76,0,0,96,97,5,80,0,0,97,98,5,67,0,0,98,99,5,72,0,0,99,143,
        5,76,0,0,100,101,5,83,0,0,101,102,5,80,0,0,102,103,5,72,0,0,103,
        143,5,76,0,0,104,105,5,88,0,0,105,106,5,67,0,0,106,107,5,72,0,0,
        107,143,5,71,0,0,108,109,5,69,0,0,109,143,5,73,0,0,110,111,5,68,
        0,0,111,143,5,73,0,0,112,113,5,82,0,0,113,114,5,73,0,0,114,143,5,
        77,0,0,115,116,5,83,0,0,116,117,5,73,0,0,117,143,5,77,0,0,118,119,
        5,68,0,0,119,120,5,65,0,0,120,143,5,65,0,0,121,122,5,67,0,0,122,
        123,5,77,0,0,123,143,5,65,0,0,124,125,5,83,0,0,125,126,5,84,0,0,
        126,143,5,67,0,0,127,128,5,67,0,0,128,129,5,77,0,0,129,143,5,67,
        0,0,130,131,5,82,0,0,131,132,5,65,0,0,132,143,5,76,0,0,133,134,5,
        82,0,0,134,135,5,65,0,0,135,143,5,82,0,0,136,137,5,82,0,0,137,138,
        5,76,0,0,138,143,5,67,0,0,139,140,5,82,0,0,140,141,5,82,0,0,141,
        143,5,67,0,0,142,63,1,0,0,0,142,66,1,0,0,0,142,69,1,0,0,0,142,72,
        1,0,0,0,142,75,1,0,0,0,142,77,1,0,0,0,142,80,1,0,0,0,142,82,1,0,
        0,0,142,85,1,0,0,0,142,88,1,0,0,0,142,90,1,0,0,0,142,92,1,0,0,0,
        142,96,1,0,0,0,142,100,1,0,0,0,142,104,1,0,0,0,142,108,1,0,0,0,142,
        110,1,0,0,0,142,112,1,0,0,0,142,115,1,0,0,0,142,118,1,0,0,0,142,
        121,1,0,0,0,142,124,1,0,0,0,142,127,1,0,0,0,142,130,1,0,0,0,142,
        133,1,0,0,0,142,136,1,0,0,0,142,139,1,0,0,0,143,10,1,0,0,0,144,145,
        5,80,0,0,145,146,5,85,0,0,146,147,5,83,0,0,147,238,5,72,0,0,148,
        149,5,80,0,0,149,150,5,79,0,0,150,238,5,80,0,0,151,152,5,73,0,0,
        152,153,5,78,0,0,153,238,5,82,0,0,154,155,5,68,0,0,155,156,5,67,
        0,0,156,238,5,82,0,0,157,158,5,68,0,0,158,159,5,65,0,0,159,238,5,
        68,0,0,160,161,5,73,0,0,161,162,5,78,0,0,162,238,5,88,0,0,163,164,
        5,68,0,0,164,165,5,67,0,0,165,238,5,88,0,0,166,167,5,67,0,0,167,
        168,5,65,0,0,168,169,5,76,0,0,169,238,5,76,0,0,170,171,5,74,0,0,
        171,172,5,77,0,0,172,238,5,80,0,0,173,174,5,74,0,0,174,175,5,78,
        0,0,175,238,5,90,0,0,176,177,5,74,0,0,177,238,5,90,0,0,178,179,5,
        74,0,0,179,180,5,78,0,0,180,238,5,67,0,0,181,182,5,74,0,0,182,238,
        5,67,0,0,183,184,5,74,0,0,184,185,5,80,0,0,185,238,5,79,0,0,186,
        187,5,74,0,0,187,188,5,80,0,0,188,238,5,69,0,0,189,190,5,74,0,0,
        190,238,5,80,0,0,191,192,5,74,0,0,192,238,5,77,0,0,193,194,5,67,
        0,0,194,195,5,78,0,0,195,238,5,90,0,0,196,197,5,67,0,0,197,238,5,
        90,0,0,198,199,5,67,0,0,199,200,5,78,0,0,200,238,5,67,0,0,201,202,
        5,67,0,0,202,238,5,67,0,0,203,204,5,67,0,0,204,205,5,80,0,0,205,
        238,5,79,0,0,206,207,5,67,0,0,207,208,5,80,0,0,208,238,5,69,0,0,
        209,210,5,67,0,0,210,238,5,80,0,0,211,212,5,67,0,0,212,238,5,77,
        0,0,213,214,5,65,0,0,214,215,5,78,0,0,215,238,5,65,0,0,216,217,5,
        79,0,0,217,218,5,82,0,0,218,238,5,65,0,0,219,220,5,88,0,0,220,221,
        5,82,0,0,221,238,5,65,0,0,222,223,5,65,0,0,223,224,5,68,0,0,224,
        238,5,68,0,0,225,226,5,65,0,0,226,227,5,68,0,0,227,238,5,67,0,0,
        228,229,5,83,0,0,229,230,5,85,0,0,230,238,5,66,0,0,231,232,5,83,
        0,0,232,233,5,66,0,0,233,238,5,66,0,0,234,235,5,67,0,0,235,236,5,
        77,0,0,236,238,5,80,0,0,237,144,1,0,0,0,237,148,1,0,0,0,237,151,
        1,0,0,0,237,154,1,0,0,0,237,157,1,0,0,0,237,160,1,0,0,0,237,163,
        1,0,0,0,237,166,1,0,0,0,237,170,1,0,0,0,237,173,1,0,0,0,237,176,
        1,0,0,0,237,178,1,0,0,0,237,181,1,0,0,0,237,183,1,0,0,0,237,186,
        1,0,0,0,237,189,1,0,0,0,237,191,1,0,0,0,237,193,1,0,0,0,237,196,
        1,0,0,0,237,198,1,0,0,0,237,201,1,0,0,0,237,203,1,0,0,0,237,206,
        1,0,0,0,237,209,1,0,0,0,237,211,1,0,0,0,237,213,1,0,0,0,237,216,
        1,0,0,0,237,219,1,0,0,0,237,222,1,0,0,0,237,225,1,0,0,0,237,228,
        1,0,0,0,237,231,1,0,0,0,237,234,1,0,0,0,238,12,1,0,0,0,239,240,5,
        77,0,0,240,241,5,79,0,0,241,300,5,86,0,0,242,243,5,77,0,0,243,244,
        5,86,0,0,244,300,5,73,0,0,245,246,5,76,0,0,246,247,5,88,0,0,247,
        300,5,73,0,0,248,249,5,76,0,0,249,250,5,68,0,0,250,300,5,65,0,0,
        251,252,5,83,0,0,252,253,5,84,0,0,253,300,5,65,0,0,254,255,5,76,
        0,0,255,256,5,72,0,0,256,257,5,76,0,0,257,300,5,68,0,0,258,259,5,
        83,0,0,259,260,5,72,0,0,260,261,5,76,0,0,261,300,5,68,0,0,262,263,
        5,76,0,0,263,264,5,68,0,0,264,265,5,65,0,0,265,300,5,88,0,0,266,
        267,5,83,0,0,267,268,5,84,0,0,268,269,5,65,0,0,269,300,5,88,0,0,
        270,271,5,65,0,0,271,272,5,68,0,0,272,300,5,73,0,0,273,274,5,65,
        0,0,274,275,5,67,0,0,275,300,5,73,0,0,276,277,5,83,0,0,277,278,5,
        85,0,0,278,300,5,73,0,0,279,280,5,83,0,0,280,281,5,66,0,0,281,300,
        5,73,0,0,282,283,5,65,0,0,283,284,5,78,0,0,284,300,5,73,0,0,285,
        286,5,79,0,0,286,287,5,82,0,0,287,300,5,73,0,0,288,289,5,88,0,0,
        289,290,5,82,0,0,290,300,5,73,0,0,291,292,5,67,0,0,292,293,5,80,
        0,0,293,300,5,73,0,0,294,295,5,73,0,0,295,300,5,78,0,0,296,297,5,
        79,0,0,297,298,5,85,0,0,298,300,5,84,0,0,299,239,1,0,0,0,299,242,
        1,0,0,0,299,245,1,0,0,0,299,248,1,0,0,0,299,251,1,0,0,0,299,254,
        1,0,0,0,299,258,1,0,0,0,299,262,1,0,0,0,299,266,1,0,0,0,299,270,
        1,0,0,0,299,273,1,0,0,0,299,276,1,0,0,0,299,279,1,0,0,0,299,282,
        1,0,0,0,299,285,1,0,0,0,299,288,1,0,0,0,299,291,1,0,0,0,299,294,
        1,0,0,0,299,296,1,0,0,0,300,14,1,0,0,0,301,302,7,1,0,0,302,16,1,
        0,0,0,303,304,7,2,0,0,304,18,1,0,0,0,305,306,7,3,0,0,306,20,1,0,
        0,0,307,308,7,4,0,0,308,22,1,0,0,0,309,310,7,5,0,0,310,24,1,0,0,
        0,311,312,7,6,0,0,312,26,1,0,0,0,313,314,7,7,0,0,314,28,1,0,0,0,
        315,316,7,8,0,0,316,317,7,9,0,0,317,318,7,10,0,0,318,30,1,0,0,0,
        319,320,7,9,0,0,320,321,7,8,0,0,321,32,1,0,0,0,322,323,7,11,0,0,
        323,34,1,0,0,0,324,328,3,37,18,0,325,328,3,39,19,0,326,328,3,41,
        20,0,327,324,1,0,0,0,327,325,1,0,0,0,327,326,1,0,0,0,328,36,1,0,
        0,0,329,331,7,12,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,
        0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,7,6,0,0,335,38,1,0,0,
        0,336,338,7,13,0,0,337,336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,
        0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,66,0,0,342,40,1,0,0,
        0,343,345,7,14,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,
        0,346,347,1,0,0,0,347,42,1,0,0,0,348,352,7,15,0,0,349,351,7,16,0,
        0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,
        0,353,44,1,0,0,0,354,352,1,0,0,0,355,357,7,17,0,0,356,355,1,0,0,
        0,357,358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,
        0,360,361,6,22,0,0,361,46,1,0,0,0,12,0,54,60,142,237,299,327,332,
        339,346,352,358,1,6,0,0
    ]

class Assembly8085Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    NEWLINE = 3
    COMMENT = 4
    OPCODE_NOARG = 5
    OPCODE_ONEARG = 6
    OPCODE_TWOARG = 7
    REG_A = 8
    REG_B = 9
    REG_C = 10
    REG_D = 11
    REG_E = 12
    REG_H = 13
    REG_L = 14
    REG_PSW = 15
    REG_SP = 16
    MEMORY_REFERENCE = 17
    NUMBER = 18
    IDENTIFIER = 19
    WS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "COMMENT", "OPCODE_NOARG", "OPCODE_ONEARG", "OPCODE_TWOARG", 
            "REG_A", "REG_B", "REG_C", "REG_D", "REG_E", "REG_H", "REG_L", 
            "REG_PSW", "REG_SP", "MEMORY_REFERENCE", "NUMBER", "IDENTIFIER", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "NEWLINE", "COMMENT", "OPCODE_NOARG", 
                  "OPCODE_ONEARG", "OPCODE_TWOARG", "REG_A", "REG_B", "REG_C", 
                  "REG_D", "REG_E", "REG_H", "REG_L", "REG_PSW", "REG_SP", 
                  "MEMORY_REFERENCE", "NUMBER", "HEX_NUM", "BIN_NUM", "DEC_NUM", 
                  "IDENTIFIER", "WS" ]

    grammarFileName = "Assembly8085.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


